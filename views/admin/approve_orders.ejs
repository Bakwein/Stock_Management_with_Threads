<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/head') %>
    <style>
        body {
            /* display: flex; */
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: #2A2B33;
        }
        #priorityTable th, #priorityTable td {
            color: white !important; /* Metin rengi beyaz */
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <%- include('../partials/admin/nav') %>
    <div class="container mt-3">
         <div class="col-md-12 mt-3">
            <h3 style="color: #fff;"><strong>Threadlerin Öncelik Durumları</strong></h3>
            <canvas id="myChart" width="300" height="75"></canvas>
            <h3 style="color: #fff;"><strong>Onay Bekleyen Siparişler</strong></h3>
            <button class="btn btn-success" onclick="tumunuOnayla()">Tümünü Onayla</button>
            <div class="row">
                <div class="col-md-12 mt-3">
                    <% products.forEach(product => { %>
                        <div class="card mb-3">
                            <div class="card-body">
                                <h3 class="card-title
                                "><strong><%= product.ProductName %></strong></h5>
                                <p class="card-text">Stok: <%= product.Stock %></p>
                                <p class="card-text">Fiyat: <%= product.Price %></p>
                                <hr>
                                <% if (!orders.some(order => order.ProductIDR == product.ProductID)) { %>
                                    <p class="card-text">Bu ürün için onay bekleyen sipariş bulunmamaktadır.</p>
                                 
                                <% } else { %>
                                    <h6 class="mt-3">Bu ürün için onay bekleyen siparişler:</h6>                                     
                                    <% orders.forEach(order => { %>
                                        <% if (order.ProductIDR == product.ProductID) { %>
                                            <div class="col-md-3 mt-3" >
                                                <p class="card-text"><strong>ID:</strong> <%= order.OrderID %></p>
                                                <% customers.forEach(customer => { %>
                                                    <% if (customer.CustomerID == order.CustomerIDR) { %>
                                                        <p class="card-text"><strong>Müşteri:</strong> <%= customer.CustomerName %></p>
                                                        <p class="card-text"><strong>Müşteri Tipi:</strong> <%= customer.CustomerType %></p>
                                                    <% } %>
                                                <% }) %>
                                                <p class="card-text"><strong>Miktar:</strong> <%= order.Quantity %></p>
                                                <p class="card-text"><strong>Sipariş Tarihi:</strong> <%= order.OrderDate.getDate() %>-<%= (order.OrderDate.getMonth()+1) %>-<%= order.OrderDate.getFullYear() %> <%= order.OrderDate.getHours() %>:<%= order.OrderDate.getMinutes() %>:<%= order.OrderDate.getSeconds() %></p>
                                            </div> 
                                            <hr>                     
                                        <% } %>                                       
                                    <% }) %>    
                                <% } %>                                                          
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>

            <h3 style="margin-top: 40px; color: #fff;"><strong>Onay Sırasına Göre Siparişler</strong></h3>
            <div class="row">
                <div class="col-md-12 mt-3">
                    <div>
                        <table id="priorityTable" border="1" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th style="width:80px; color: #fff">Sıra</th>
                                    <th style="color: #fff;">Order ID</th>
                                    <th style="color: #fff;">Öncelik Skoru</th>
                                    <th style="color: #fff;">Bekleme Süresi</th>
                                </tr>
                            </thead>
                            <tbody style="color: #fff">
                                <!-- Dinamik olarak satırlar buraya eklenecek -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <script src="tablo.js"></script>
        </div>

        
        
        <script>
            document.addEventListener("DOMContentLoaded", async function () {

            const ctx = document.getElementById('myChart').getContext('2d');
            const myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    //labels: threadOrderIDs, // Her ürün için bir etiket
                    labels: [],
                    datasets: [{
                        label: 'Öncelik Skoru',
                        //data: threadOncelikSkoru, // Veritabanından çekilen veriler
                        data: [],
                        //backgroundColor: backgroundColors,
                        //borderColor: borderColors,
                        backgroundColor: [],
                        borderColor: [],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            setInterval(async function(){
                const response = await fetch('http://localhost:3001/api/threads', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                });
                const threads = await response.json();
                console.log(threads);

                const threadOrderIDs = threads
                .filter(thread => thread.orderId !== undefined && thread.orderId !== null) 
                .map(thread => thread.orderId);
                //console.log(threadOrderIDs);

                const threadOncelikSkoru = threads
                .filter(thread => thread.oncelikSkoru !== undefined && thread.oncelikSkoru !== null) 
                .map(thread => thread.oncelikSkoru);
                //console.log(threadOncelikSkoru);

                const beklemeSuresi = threads
                .filter(thread => thread.beklemeSuresi !== undefined && thread.beklemeSuresi !== null) 
                .map(thread => thread.beklemeSuresi);
                console.log(beklemeSuresi);

                const backgroundColors = threadOncelikSkoru.map(stock => stock < 10 ? 'rgba(255, 99, 132, 0.2)' : 'rgba(75, 192, 192, 0.2)');
                const borderColors = threadOncelikSkoru.map(stock => stock < 10 ? 'rgba(255, 99, 132, 1)' : 'rgba(75, 192, 192, 1)');

                const beklemeSuresiColors = beklemeSuresi.map(sure => sure > 200 ? 'rgba(54, 162, 235, 0.2)' : 'rgba(153, 102, 255, 0.2)');
                const beklemeSuresiBorderColors = beklemeSuresi.map(sure => sure > 200 ? 'rgba(54, 162, 235, 1)' : 'rgba(153, 102, 255, 1)');


                myChart.data.labels = threadOrderIDs;
                myChart.data.datasets[0].data = threadOncelikSkoru;
                myChart.data.datasets[0].backgroundColor = backgroundColors;
                myChart.data.datasets[0].borderColor = borderColors;

                if(myChart.data.datasets.length < 2){
                    myChart.data.datasets.push({
                        label: 'Bekleme Süresi',
                        data: beklemeSuresi,
                        backgroundColor: beklemeSuresiColors,
                        borderColor: beklemeSuresiBorderColors,
                        borderWidth: 1
                    });
                } else {
                    myChart.data.datasets[1].data = beklemeSuresi;
                    myChart.data.datasets[1].backgroundColor = beklemeSuresiColors;
                    myChart.data.datasets[1].borderColor = beklemeSuresiBorderColors;
                }

                myChart.update();
            }, 1000);
        });
        </script>

        <script>
            async function tumunuOnayla() {
                const response = await fetch('http://localhost:3001/api/process_orders', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                });

                const result = await response.json();
                console.log(result);
            }
        </script>
    
        <script>
            document.addEventListener("DOMContentLoaded", async function () {
                setInterval(async function () {
                    // API'den veri çek
                    const response = await fetch('http://localhost:3001/api/threads', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                    });
                    const threads = await response.json();

                    // *** TABLOYU GÜNCELLEME ***
                    const tableBody = document.querySelector('#priorityTable tbody');
                    tableBody.innerHTML = ""; // Mevcut tabloyu temizle

                    threads.forEach((thread, index) => {
                        if (thread.orderId && thread.oncelikSkoru && thread.beklemeSuresi !== undefined) {
                            const row = document.createElement('tr');
                            row.style.color = 'white';

                            // Sıra numarası
                            const sıraCell = document.createElement('td');
                            sıraCell.textContent = index + 1;

                            // Order ID
                            const orderIdCell = document.createElement('td');
                            orderIdCell.textContent = thread.orderId;

                            // Öncelik Skoru
                            const oncelikSkoruCell = document.createElement('td');
                            oncelikSkoruCell.textContent = thread.oncelikSkoru;

                            // Bekleme Süresi
                            const beklemeSuresiCell = document.createElement('td');
                            beklemeSuresiCell.textContent = thread.beklemeSuresi;

                            // Satıra hücreleri ekle
                            row.appendChild(sıraCell);
                            row.appendChild(orderIdCell);
                            row.appendChild(oncelikSkoruCell);
                            row.appendChild(beklemeSuresiCell);

                            // Satırı tablo gövdesine ekle
                            tableBody.appendChild(row);
                        }
                    });
                }, 1000);
            });
        </script>
</body>
</html>